(define (domain blocks)
(:requirements :strips :typing :negative-preconditions :equality)
(:types 	block robot - object
)

(:predicates (on ?x - block ?y - block)
	(ontable ?x - block)
	(clear ?x - block)
	(handempty ?x - robot)
	(handfull ?x - robot)
	(holding ?x - block)
)

(:action pick-up
	:parameters (?x - block ?robot - robot)
	:precondition (and (clear ?x)
	(handempty ?robot)
	(ontable ?x))
	:effect (and (handfull ?robot)
		(holding ?x)
		(not (clear ?x))
		(not (handempty ?robot))
		(not (ontable ?x)) 
		))

(:action put-down
	:parameters (?x - block ?robot - robot)
	:precondition (and (handfull ?robot)
	(holding ?x))
	:effect (and (clear ?x)
		(handempty ?robot)
		(not (handfull ?robot))
		(not (holding ?x))
		(ontable ?x) 
		))

(:action stack
	:parameters (?x - block ?y - block ?robot - robot)
	:precondition (and (clear ?y)
	(handfull ?robot)
	(holding ?x)(not (= ?x ?y)))
	:effect (and (clear ?x)
		(handempty ?robot)
		(not (clear ?y))
		(not (handfull ?robot))
		(not (holding ?x))
		(on ?x ?y) 
		))

(:action unstack
	:parameters (?x - block ?y - block ?robot - robot)
	:precondition (and (clear ?x)
	(handempty ?robot)
	(on ?x ?y)(not (= ?x ?y)))
	:effect (and (clear ?y)
		(handfull ?robot)
		(holding ?x)
		(not (clear ?x))
		(not (handempty ?robot))
		(not (on ?x ?y)) 
		))

)